[
    {
        "id": "71ca1bc44c1ef695",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2069bda24c7c7ed8",
        "type": "tab",
        "label": "Rumesh_Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "000e0e8cffcc4efc",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bbe3f5ac25d19597",
        "type": "tab",
        "label": "Rumesh_Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d84a04297149e26",
        "type": "tab",
        "label": "Rumesh_Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b11715af8ac8d91a",
        "type": "mqtt-broker",
        "name": "mqtt1",
        "broker": "eclipse-mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ecf65e035c5ccf23",
        "type": "database-config",
        "name": "AquaDigital",
        "authType": "anonymous",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "7be4946d8e0d9b73",
        "type": "database-config",
        "name": "AquaDigital",
        "authType": "anonymous",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "d9e5aac221582427",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "my_influxdb",
        "name": "Test",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com/",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "02e60eabb08af039",
        "type": "mqtt in",
        "z": "71ca1bc44c1ef695",
        "name": "",
        "topic": "test",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b11715af8ac8d91a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 260,
        "wires": [
            [
                "997ec0d1e0c130d0"
            ]
        ]
    },
    {
        "id": "af96161b799ee501",
        "type": "mqtt out",
        "z": "71ca1bc44c1ef695",
        "name": "",
        "topic": "test",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b11715af8ac8d91a",
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "ebf6b1e71bddc2ed",
        "type": "inject",
        "z": "71ca1bc44c1ef695",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "af96161b799ee501"
            ]
        ]
    },
    {
        "id": "997ec0d1e0c130d0",
        "type": "function",
        "z": "71ca1bc44c1ef695",
        "name": "function 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "29cdd6ed6a1933b4",
        "type": "function",
        "z": "2069bda24c7c7ed8",
        "name": "Process Data",
        "func": "\n\nvar inputString = msg.payload;\nvar jsonString = inputString.replace(/'/g, '\"');\nvar data = JSON.parse(jsonString);\n\nfunction checkNegative(value) {\n    return value < 0 ? 'NC' : value;\n}\n\n\nmsg.payload = {\n    Temp: checkNegative(data.t),\n    pH: checkNegative(data.p),\n    TDS: checkNegative(data.T),\n    ox: data.o,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "ace802b9380be149",
                "6ba0b322bb339263"
            ]
        ]
    },
    {
        "id": "ace802b9380be149",
        "type": "debug",
        "z": "2069bda24c7c7ed8",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "3cb34b9255a199f7",
        "type": "inject",
        "z": "2069bda24c7c7ed8",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{'t':12790,'p':7.2,'T':435, 'o':300}",
        "payloadType": "str",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "32d4a7dff53c3f72",
                "29cdd6ed6a1933b4"
            ]
        ]
    },
    {
        "id": "32d4a7dff53c3f72",
        "type": "debug",
        "z": "2069bda24c7c7ed8",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 200,
        "wires": []
    },
    {
        "id": "6ba0b322bb339263",
        "type": "function",
        "z": "2069bda24c7c7ed8",
        "name": "Add Timestamp",
        "func": "var data = msg.payload;\n\nvar currentDate = new Date();\n\nvar day = currentDate.getDate().toString().padStart(2, '0');\nvar month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\nvar year = currentDate.getFullYear();\nvar hours = currentDate.getHours().toString().padStart(2, '0');\nvar minutes = currentDate.getMinutes().toString().padStart(2, '0');\nvar seconds = currentDate.getSeconds().toString().padStart(2, '0');\n\nvar formattedDate = `${day}:${month}:${year}_${hours}:${minutes}:${seconds}`;\n\nmsg.payload = { \n    time: formattedDate,\n    Temp: data.Temp,\n    pH: data.pH,\n    TDS: data.TDS,\n    ox: data.ox\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "00195d7176b5be24"
            ]
        ]
    },
    {
        "id": "00195d7176b5be24",
        "type": "debug",
        "z": "2069bda24c7c7ed8",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "d713a6ba31e13423",
        "type": "inject",
        "z": "000e0e8cffcc4efc",
        "name": "insert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "42",
        "payloadType": "str",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "f3297a644b926185",
                "f9b4008b799d76ac"
            ]
        ]
    },
    {
        "id": "f3297a644b926185",
        "type": "debug",
        "z": "000e0e8cffcc4efc",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 180,
        "wires": []
    },
    {
        "id": "f9b4008b799d76ac",
        "type": "influxdb out",
        "z": "000e0e8cffcc4efc",
        "influxdb": "d9e5aac221582427",
        "name": "test_data",
        "measurement": "test_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "nodered_temp",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "a5bd6fd5ee0f5f85",
        "type": "function",
        "z": "bbe3f5ac25d19597",
        "name": "Process Data",
        "func": "\n\nvar inputString = msg.payload;\nvar jsonString = inputString.replace(/'/g, '\"');\nvar data = JSON.parse(jsonString);\n\nfunction checkNegative(value) {\n    return value < 0 ? 'NC' : value;\n}\n\n\nmsg.payload = {\n    Temp: checkNegative(data.t),\n    pH: checkNegative(data.p),\n    TDS: checkNegative(data.T),\n    ox: data.o,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "26a8c2fd37423880",
                "85c76de0cca98da7",
                "d8d79a6510cb172d"
            ]
        ]
    },
    {
        "id": "26a8c2fd37423880",
        "type": "debug",
        "z": "bbe3f5ac25d19597",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "14cd96a09abd3c39",
        "type": "inject",
        "z": "bbe3f5ac25d19597",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{'t':12790,'p':7.2,'T':435, 'o':300}",
        "payloadType": "str",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "6cacf92a2d115911",
                "a5bd6fd5ee0f5f85"
            ]
        ]
    },
    {
        "id": "6cacf92a2d115911",
        "type": "debug",
        "z": "bbe3f5ac25d19597",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 200,
        "wires": []
    },
    {
        "id": "d8d79a6510cb172d",
        "type": "function",
        "z": "bbe3f5ac25d19597",
        "name": "Add Timestamp",
        "func": "var data = msg.payload;\n\nvar currentDate = new Date();\n\nvar day = currentDate.getDate().toString().padStart(2, '0');\nvar month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\nvar year = currentDate.getFullYear();\nvar hours = currentDate.getHours().toString().padStart(2, '0');\nvar minutes = currentDate.getMinutes().toString().padStart(2, '0');\nvar seconds = currentDate.getSeconds().toString().padStart(2, '0');\n\nvar formattedDate = `${day}:${month}:${year}_${hours}:${minutes}:${seconds}`;\n\nmsg.payload = { \n    time: formattedDate,\n    Temp: data.Temp,\n    pH: data.pH,\n    TDS: data.TDS,\n    ox: data.ox\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "9745ce2efdd1dc7f",
                "a8fcaca3997f871d"
            ]
        ]
    },
    {
        "id": "a8fcaca3997f871d",
        "type": "debug",
        "z": "bbe3f5ac25d19597",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "9745ce2efdd1dc7f",
        "type": "firebase-out",
        "z": "bbe3f5ac25d19597",
        "name": "",
        "database": "ecf65e035c5ccf23",
        "path": "Devices/Rumesh/log",
        "pathType": "str",
        "priority": 1,
        "queryType": "push",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "85c76de0cca98da7",
        "type": "firebase-out",
        "z": "bbe3f5ac25d19597",
        "name": "",
        "database": "ecf65e035c5ccf23",
        "path": "Devices/Rumesh/RT",
        "pathType": "str",
        "priority": 1,
        "queryType": "update",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "411033893fa3599d",
        "type": "mqtt out",
        "z": "bbe3f5ac25d19597",
        "name": "",
        "topic": "test",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b11715af8ac8d91a",
        "x": 330,
        "y": 460,
        "wires": []
    },
    {
        "id": "f0dbc755bca3e215",
        "type": "mqtt in",
        "z": "bbe3f5ac25d19597",
        "name": "",
        "topic": "test",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b11715af8ac8d91a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 540,
        "wires": [
            [
                "97cbe7494393a7eb"
            ]
        ]
    },
    {
        "id": "3b1a98e73094a68e",
        "type": "inject",
        "z": "bbe3f5ac25d19597",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{'t':12790,'p':7.2,'T':435, 'o':300}",
        "payloadType": "str",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "411033893fa3599d"
            ]
        ]
    },
    {
        "id": "97cbe7494393a7eb",
        "type": "debug",
        "z": "bbe3f5ac25d19597",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 540,
        "wires": []
    },
    {
        "id": "57f036711260e938",
        "type": "influxdb in",
        "z": "bbe3f5ac25d19597",
        "influxdb": "d9e5aac221582427",
        "name": "influx",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "2843e84086b209ff"
            ]
        ]
    },
    {
        "id": "2843e84086b209ff",
        "type": "debug",
        "z": "bbe3f5ac25d19597",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "fc8893f63e865abf",
        "type": "inject",
        "z": "bbe3f5ac25d19597",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{'t':12790,'p':7.2,'T':435, 'o':300}",
        "payloadType": "str",
        "x": 500,
        "y": 580,
        "wires": [
            [
                "57f036711260e938"
            ]
        ]
    },
    {
        "id": "5e8aa88f830128cd",
        "type": "function",
        "z": "2d84a04297149e26",
        "name": "Process Data",
        "func": "\nfunction checkValues(data) {\n    function checkTemperature(value) {\n        return value == -127 ? 'NC' : value;\n    }\n\n    function checkPH(value) {\n        return value == 6.53 ? 'NC' : value;\n    }\n\n    function checkTDS(value) {\n        return value < 500 ? 'below 500' : value;\n    }\n\n    function checkOxygen(value) {\n    return typeof value === 'number' && value < 0 ? 'below 0' : value;\n    }\n\n\n    var processedData = {\n    \n      TDS: checkTDS(data.T),\n      Temp: checkTemperature(data.t),\n      ox: data.o,\n      oxygen: checkOxygen(data.o),\n      pH: checkPH(data.p)\n    \n  };\n\n\n\n  return processedData;\n}\n\nvar inputString = msg.payload;\nvar jsonString = inputString.replace(/'/g, '\"');\nvar data = JSON.parse(jsonString);\n\nmsg.payload = checkValues(data);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "fa9ad75e881ea421",
                "410174f7c7ecb417",
                "3b5042add4fcfc72"
            ]
        ]
    },
    {
        "id": "fa9ad75e881ea421",
        "type": "debug",
        "z": "2d84a04297149e26",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "cce0e19dd441533e",
        "type": "inject",
        "z": "2d84a04297149e26",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "{'t':-127,'p':6.53,'T':200, 'o':1}",
        "payloadType": "str",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "b9d988a8edb30308",
                "5e8aa88f830128cd"
            ]
        ]
    },
    {
        "id": "b9d988a8edb30308",
        "type": "debug",
        "z": "2d84a04297149e26",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 200,
        "wires": []
    },
    {
        "id": "3b5042add4fcfc72",
        "type": "function",
        "z": "2d84a04297149e26",
        "name": "Add Timestamp",
        "func": "var data = msg.payload;\n\nvar currentDate = new Date();\n\nvar day = currentDate.getDate().toString().padStart(2, '0');\nvar month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\nvar year = currentDate.getFullYear();\nvar hours = currentDate.getHours().toString().padStart(2, '0');\nvar minutes = currentDate.getMinutes().toString().padStart(2, '0');\nvar seconds = currentDate.getSeconds().toString().padStart(2, '0');\n\nvar formattedDate = `${day}:${month}:${year}_${hours}:${minutes}:${seconds}`;\n\nmsg.payload = { \n    time: formattedDate,\n    Temp: data.Temp,\n    pH: data.pH,\n    TDS: data.TDS,\n    ox: data.ox\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "d3c442712a48aa94",
                "374f83ba0b66cdc6"
            ]
        ]
    },
    {
        "id": "374f83ba0b66cdc6",
        "type": "debug",
        "z": "2d84a04297149e26",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "d3c442712a48aa94",
        "type": "firebase-out",
        "z": "2d84a04297149e26",
        "name": "",
        "database": "7be4946d8e0d9b73",
        "path": "Devices/Deshani/log",
        "pathType": "str",
        "priority": 1,
        "queryType": "push",
        "x": 1020,
        "y": 400,
        "wires": []
    },
    {
        "id": "410174f7c7ecb417",
        "type": "firebase-out",
        "z": "2d84a04297149e26",
        "name": "",
        "database": "7be4946d8e0d9b73",
        "path": "Devices/Deshani/RT",
        "pathType": "str",
        "priority": 1,
        "queryType": "update",
        "x": 1030,
        "y": 320,
        "wires": []
    }
]